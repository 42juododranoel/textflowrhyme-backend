[tool.poetry]
name = "textflowrhyme"
version = "1.0.0"
description = ""
authors = []
maintainers = []
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.101.0"
uvicorn = "^0.23.2"
nltk = "^3.8.1"
kmeans1d = "^0.3.1"
httpx = "^0.26"
sqlalchemy-utils = "^0.41.1"
pydantic-settings = "^2.1.0"
psycopg2 = "^2.9.9"
fief-client = {extras = ["fastapi"], version = "^0.18.6"}
sqlalchemy = {extras = ["mypy"], version = "^2.0.27"}

[tool.poetry.group.dev.dependencies]
ruff = "^0.1.10"
isort = "^5.12.0"
ipdb = "^0.13.13"
pytest = "^7.4.0"
pytest-mock = "^3.11.1"
pytest-httpx = "^0.28.0"

[tool.isort]
profile = "black"

[tool.mypy]
disallow_any_generics = true
disallow_any_unimported = true
disallow_any_expr = true
disallow_any_decorated = true
disallow_any_explicit = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = false
disallow_incomplete_defs = true
implicit_optional = true
strict_optional = true
check_untyped_defs = true
no_implicit_reexport = true
strict_equality = true
extra_checks = true
local_partial_types = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
warn_no_return = false

[tool.ruff]
line-length = 100
select = ["ALL"]
ignore = [
    "D100",  # Missing docstring in public module
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D106",  # Missing docstring in public nested class
    "D107",  # Missing docstring in `__init__`
    "D202",  # No blank lines allowed after function docstring (found 1)
    "D203",  # "one-blank-line-before-class"
    "D212",  # "multi-line-summary-first-line"
    "RUF001",  # String contains ambiguous `я`
    "RUF002",  # Docstring contains ambiguous `я`
    "RUF003",  # Comment contains ambiguous `я`
    "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "PT001",  # Use `@pytest.fixture()` over `@pytest.fixture`
    "FA102",  # Missing `from __future__ import annotations`
    "E501",  # Line too long
    "TD002",  # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    "TD003",  # Missing issue link on the line following this TODO
]

[tool.ruff.per-file-ignores]
"test_*.py" = [
    "S101",  # Use of `assert` detected
    "ARG001",  # Unused function argument
    "ANN201",  # Missing return type annotation for public function
    "PLR0913",  # Too many arguments in function definition
    "PLR2004",  # Magic value used in comparison, consider replacing 0.00108 with a constant variable
]
"conftest.py" = [
    "ARG001",  # Unused function argument
]
"fixtures.py" = [
    "ARG001",  # Unused function argument
]
"**/serializers/**" = [
    "D101",  # Missing docstring in public class
]

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::PendingDeprecationWarning",
    "ignore::DeprecationWarning",
]
