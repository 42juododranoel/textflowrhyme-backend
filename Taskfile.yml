version: '3'

vars:
  PYTHON_VERSION: 3.11.0
  PYENV_NAME: textflowrhyme

tasks:
  # Development & CI

  run:
    cmds:
      - uvicorn app:app --host 0.0.0.0 --port 8000 --reload
    dir: ./textflowrhyme

  migrations:generate:
    cmds:
      - ~/.pyenv/versions/textflowrhyme/bin/alembic revision --autogenerate -m "{{.MIGRATION_NAME}}"
    vars:
      MIGRATION_NAME: '{{default "unnamed" .CLI_ARGS}}'
    dir: ./textflowrhyme

  migrations:apply:
    cmds:
      - ~/.pyenv/versions/textflowrhyme/bin/alembic upgrade head
    dir: ./textflowrhyme

  migrations:stamp:
    cmds:
      - ~/.pyenv/versions/textflowrhyme/bin/alembic stamp head
    dir: ./textflowrhyme

  test:
    cmds:
      - pytest -svv {{.CLI_ARGS}}

  format:isort:
    cmds:
      - isort --profile black .
    dir: ./textflowrhyme

  format:ruff:
    cmds:
      - ruff check --fix-only --ignore COM819 .
      - ruff format
    dir: ./textflowrhyme

  format:
    cmds:
      - task: format:isort
      - task: format:ruff

  lint:ruff:
    cmds:
      - ruff check .
    dir: ./textflowrhyme

  lint:mypy:
    cmds:
      - echo "Type checking temporarily disabled"
      # - mypy --pretty --show-error-context --show-error-code-links textflowrhyme {{.LINT_MYPY_KWARGS}}
    vars:
      LINT_MYPY_KWARGS: '{{default "" .LINT_MYPY_KWARGS}}'

  lint:
    cmds:
      - task: lint:ruff
      - task: lint:mypy
        vars:
          LINT_MYPY_KWARGS: '{{default "" .LINT_MYPY_KWARGS}}'

  # Docker

  build:testing:
    cmds:
      - poetry install --no-root --no-interaction --no-ansi
      - task: install:nltk

  build:deployment:
    cmds:
      - poetry install --only=main --no-root --no-interaction --no-ansi
      - task: install:nltk

  start:testing:
    cmds:
      - task: lint
        vars:
          LINT_MYPY_KWARGS: --cache-dir /tmp
      - task: test

  start:deployment:
    cmds:
      - uvicorn app:app --host 0.0.0.0 --port 8000
    dir: ./textflowrhyme

  # Convenience

  install:taskfile:
    cmds:
      - sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d

  install:pyenv:
    cmds:
      - bash -c "[[ -v PYENV_ROOT ]] && echo 'Skipping installationâ€¦' || curl https://pyenv.run | bash"
      - pyenv install --skip-existing {{ .PYTHON_VERSION }}
      - pyenv virtualenv {{ .PYTHON_VERSION }} {{ .PYENV_NAME }} || true

  install:poetry:
    cmds:
      - curl -sSL https://install.python-poetry.org | python3 -

  install:nltk:
    cmds:
      - python3 -c 'import nltk; nltk.download("punkt")'
